/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * DMI Open Data API - Forecast data
 * <h2>Free access to the Danish Meteorological Institutes data.  <img style="float: right; max-width: 6%;" src='https://www.dmi.dk/fileadmin/templates/img/logo.png'></img></h2>                    <p>The services provided by this API require authentication and an authentication key is mandatory.<br/>In order to retrieve data it is necessary to register as user. Read more here: <a style="text-decoration: none;" href="https://opendatadocs.dmi.govcloud.dk/en/Authentication">Authentication</a></p>                    <p><a style="text-decoration: none;" href="https://opendatadocs.dmi.govcloud.dk/en/APIs/Forecast_Data_STAC-API">Information about the Forecast Data service</a></p>                    <p>This service follows the standard for STAC API - Features as described in <a href="https://api.stacspec.org/v1.0.0-beta.4/core/">STAC API - Core</a></p>
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query";

import type {
  Collection,
  Collections,
  Conformance,
  Feature,
  FeatureCollection,
  GetDKSSIDWFeaturesParams,
  GetDKSSIFFeaturesParams,
  GetDKSSLBFeaturesParams,
  GetDKSSLFFeaturesParams,
  GetDKSSNSBSFeaturesParams,
  GetDKSSWSFeaturesParams,
  GetHarmonieDiniEpsMeansFeaturesParams,
  GetHarmonieDiniEpsPercentilesFeaturesParams,
  GetHarmonieDiniEpsProbabilitiesFeaturesParams,
  GetHarmonieDiniMlFeaturesParams,
  GetHarmonieDiniPlFeaturesParams,
  GetHarmonieDiniSfFeaturesParams,
  GetHarmonieIgMlFeaturesParams,
  GetHarmonieIgPlFeaturesParams,
  GetHarmonieIgSfFeaturesParams,
  GetWAMDWFeaturesParams,
  GetWAMNATLANTFeaturesParams,
  GetWAMNSBFeaturesParams,
  LandingPage
} from "./dmi-forecast-schemas";

import { customInstance } from "../mutator/mutator";
import type { ErrorType } from "../mutator/mutator";
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Download the given forecast file
 */
export const getFile = (
  fileName: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Blob>(
    {
      url: `/v1/forecastdata/download/${fileName}`,
      method: "GET",
      responseType: "blob",
      signal
    },
    options
  );
};

export const getGetFileQueryKey = (fileName: string) => {
  return [`/v1/forecastdata/download/${fileName}`] as const;
};

export const getGetFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFileQueryKey(fileName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFile>>> = ({
    signal
  }) => getFile(fileName, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!fileName,
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFile>>
>;
export type GetFileQueryError = ErrorType<unknown>;

export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFile>>,
          TError,
          Awaited<ReturnType<typeof getFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFile>>,
          TError,
          Awaited<ReturnType<typeof getFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Download the given forecast file
 */

export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFileQueryOptions(fileName, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get the list of conformance classes that this service implements
 */
export const getTheConformance = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Conformance>(
    { url: `/v1/forecastdata/conformance`, method: "GET", signal },
    options
  );
};

export const getGetTheConformanceQueryKey = () => {
  return [`/v1/forecastdata/conformance`] as const;
};

export const getGetTheConformanceQueryOptions = <
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getTheConformance>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTheConformanceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTheConformance>>
  > = ({ signal }) => getTheConformance(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTheConformance>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTheConformanceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTheConformance>>
>;
export type GetTheConformanceQueryError = ErrorType<unknown>;

export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheConformance>>,
          TError,
          Awaited<ReturnType<typeof getTheConformance>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheConformance>>,
          TError,
          Awaited<ReturnType<typeof getTheConformance>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get the list of conformance classes that this service implements
 */

export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTheConformanceQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get the list of feature collections (data sets) in this service
 */
export const getCollections = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collections>(
    { url: `/v1/forecastdata/collections`, method: "GET", signal },
    options
  );
};

export const getGetCollectionsQueryKey = () => {
  return [`/v1/forecastdata/collections`] as const;
};

export const getGetCollectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollections>>> = ({
    signal
  }) => getCollections(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCollections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollections>>
>;
export type GetCollectionsQueryError = ErrorType<unknown>;

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get the list of feature collections (data sets) in this service
 */

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCollectionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about WAM NSB ("North Sea and Baltic Waters") files feature collection
 */
export const getWamNsbCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/wam_nsb`, method: "GET", signal },
    options
  );
};

export const getGetWamNsbCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/wam_nsb`] as const;
};

export const getGetWamNsbCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getWamNsbCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getWamNsbCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWamNsbCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWamNsbCollection>>
  > = ({ signal }) => getWamNsbCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWamNsbCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWamNsbCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWamNsbCollection>>
>;
export type GetWamNsbCollectionQueryError = ErrorType<unknown>;

export function useGetWamNsbCollection<
  TData = Awaited<ReturnType<typeof getWamNsbCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNsbCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWamNsbCollection>>,
          TError,
          Awaited<ReturnType<typeof getWamNsbCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWamNsbCollection<
  TData = Awaited<ReturnType<typeof getWamNsbCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNsbCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWamNsbCollection>>,
          TError,
          Awaited<ReturnType<typeof getWamNsbCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWamNsbCollection<
  TData = Awaited<ReturnType<typeof getWamNsbCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNsbCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about WAM NSB ("North Sea and Baltic Waters") files feature collection
 */

export function useGetWamNsbCollection<
  TData = Awaited<ReturnType<typeof getWamNsbCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNsbCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWamNsbCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "North Sea and Baltic Waters"
 */
export const getWAMNSBFeatures = (
  params?: GetWAMNSBFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/wam_nsb/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetWAMNSBFeaturesQueryKey = (
  params?: GetWAMNSBFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/wam_nsb/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetWAMNSBFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getWAMNSBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNSBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWAMNSBFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWAMNSBFeatures>>
  > = ({ signal }) => getWAMNSBFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWAMNSBFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWAMNSBFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWAMNSBFeatures>>
>;
export type GetWAMNSBFeaturesQueryError = ErrorType<unknown>;

export function useGetWAMNSBFeatures<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetWAMNSBFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNSBFeatures>>,
          TError,
          Awaited<ReturnType<typeof getWAMNSBFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNSBFeatures<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNSBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNSBFeatures>>,
          TError,
          Awaited<ReturnType<typeof getWAMNSBFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNSBFeatures<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNSBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "North Sea and Baltic Waters"
 */

export function useGetWAMNSBFeatures<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNSBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWAMNSBFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single WAM STAC feature
 */
export const getWAMNSBFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/wam_nsb/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetWAMNSBFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/wam_nsb/items/${id}`] as const;
};

export const getGetWAMNSBFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWAMNSBFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWAMNSBFeatureById>>
  > = ({ signal }) => getWAMNSBFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWAMNSBFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWAMNSBFeatureById>>
>;
export type GetWAMNSBFeatureByIdQueryError = ErrorType<unknown>;

export function useGetWAMNSBFeatureById<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getWAMNSBFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNSBFeatureById<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getWAMNSBFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNSBFeatureById<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single WAM STAC feature
 */

export function useGetWAMNSBFeatureById<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWAMNSBFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about WAM NATLANT ("North Atlantic") files feature collection
 */
export const getWamNatlantCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/wam_natlant`, method: "GET", signal },
    options
  );
};

export const getGetWamNatlantCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/wam_natlant`] as const;
};

export const getGetWamNatlantCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getWamNatlantCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getWamNatlantCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWamNatlantCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWamNatlantCollection>>
  > = ({ signal }) => getWamNatlantCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWamNatlantCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWamNatlantCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWamNatlantCollection>>
>;
export type GetWamNatlantCollectionQueryError = ErrorType<unknown>;

export function useGetWamNatlantCollection<
  TData = Awaited<ReturnType<typeof getWamNatlantCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNatlantCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWamNatlantCollection>>,
          TError,
          Awaited<ReturnType<typeof getWamNatlantCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWamNatlantCollection<
  TData = Awaited<ReturnType<typeof getWamNatlantCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNatlantCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWamNatlantCollection>>,
          TError,
          Awaited<ReturnType<typeof getWamNatlantCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWamNatlantCollection<
  TData = Awaited<ReturnType<typeof getWamNatlantCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNatlantCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about WAM NATLANT ("North Atlantic") files feature collection
 */

export function useGetWamNatlantCollection<
  TData = Awaited<ReturnType<typeof getWamNatlantCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamNatlantCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWamNatlantCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "North Atlantic"
 */
export const getWAMNATLANTFeatures = (
  params?: GetWAMNATLANTFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/wam_natlant/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetWAMNATLANTFeaturesQueryKey = (
  params?: GetWAMNATLANTFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/wam_natlant/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetWAMNATLANTFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNATLANTFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWAMNATLANTFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWAMNATLANTFeatures>>
  > = ({ signal }) => getWAMNATLANTFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWAMNATLANTFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWAMNATLANTFeatures>>
>;
export type GetWAMNATLANTFeaturesQueryError = ErrorType<unknown>;

export function useGetWAMNATLANTFeatures<
  TData = Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetWAMNATLANTFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
          TError,
          Awaited<ReturnType<typeof getWAMNATLANTFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNATLANTFeatures<
  TData = Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNATLANTFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
          TError,
          Awaited<ReturnType<typeof getWAMNATLANTFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNATLANTFeatures<
  TData = Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNATLANTFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "North Atlantic"
 */

export function useGetWAMNATLANTFeatures<
  TData = Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMNATLANTFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNATLANTFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWAMNATLANTFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single WAM STAC feature
 */
export const getWAMNSBFeatureById1 = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/wam_natlant/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetWAMNSBFeatureById1QueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/wam_natlant/items/${id}`] as const;
};

export const getGetWAMNSBFeatureById1QueryOptions = <
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWAMNSBFeatureById1QueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWAMNSBFeatureById1>>
  > = ({ signal }) => getWAMNSBFeatureById1(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWAMNSBFeatureById1QueryResult = NonNullable<
  Awaited<ReturnType<typeof getWAMNSBFeatureById1>>
>;
export type GetWAMNSBFeatureById1QueryError = ErrorType<unknown>;

export function useGetWAMNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
          TError,
          Awaited<ReturnType<typeof getWAMNSBFeatureById1>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
          TError,
          Awaited<ReturnType<typeof getWAMNSBFeatureById1>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single WAM STAC feature
 */

export function useGetWAMNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMNSBFeatureById1>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWAMNSBFeatureById1QueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about WAM DW ("Danish Waters") files feature collection
 */
export const getWamDwCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/wam_dw`, method: "GET", signal },
    options
  );
};

export const getGetWamDwCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/wam_dw`] as const;
};

export const getGetWamDwCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getWamDwCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getWamDwCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWamDwCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWamDwCollection>>
  > = ({ signal }) => getWamDwCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWamDwCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWamDwCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWamDwCollection>>
>;
export type GetWamDwCollectionQueryError = ErrorType<unknown>;

export function useGetWamDwCollection<
  TData = Awaited<ReturnType<typeof getWamDwCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamDwCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWamDwCollection>>,
          TError,
          Awaited<ReturnType<typeof getWamDwCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWamDwCollection<
  TData = Awaited<ReturnType<typeof getWamDwCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamDwCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWamDwCollection>>,
          TError,
          Awaited<ReturnType<typeof getWamDwCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWamDwCollection<
  TData = Awaited<ReturnType<typeof getWamDwCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamDwCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about WAM DW ("Danish Waters") files feature collection
 */

export function useGetWamDwCollection<
  TData = Awaited<ReturnType<typeof getWamDwCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWamDwCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWamDwCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "Danish Waters"
 */
export const getWAMDWFeatures = (
  params?: GetWAMDWFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/wam_dw/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetWAMDWFeaturesQueryKey = (
  params?: GetWAMDWFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/wam_dw/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetWAMDWFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getWAMDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWAMDWFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWAMDWFeatures>>
  > = ({ signal }) => getWAMDWFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWAMDWFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWAMDWFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWAMDWFeatures>>
>;
export type GetWAMDWFeaturesQueryError = ErrorType<unknown>;

export function useGetWAMDWFeatures<
  TData = Awaited<ReturnType<typeof getWAMDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetWAMDWFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMDWFeatures>>,
          TError,
          Awaited<ReturnType<typeof getWAMDWFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMDWFeatures<
  TData = Awaited<ReturnType<typeof getWAMDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMDWFeatures>>,
          TError,
          Awaited<ReturnType<typeof getWAMDWFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMDWFeatures<
  TData = Awaited<ReturnType<typeof getWAMDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "Danish Waters"
 */

export function useGetWAMDWFeatures<
  TData = Awaited<ReturnType<typeof getWAMDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetWAMDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWAMDWFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single WAM STAC feature
 */
export const getWAMDWFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/wam_dw/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetWAMDWFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/wam_dw/items/${id}`] as const;
};

export const getGetWAMDWFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getWAMDWFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWAMDWFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWAMDWFeatureById>>
  > = ({ signal }) => getWAMDWFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWAMDWFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWAMDWFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWAMDWFeatureById>>
>;
export type GetWAMDWFeatureByIdQueryError = ErrorType<unknown>;

export function useGetWAMDWFeatureById<
  TData = Awaited<ReturnType<typeof getWAMDWFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMDWFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getWAMDWFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMDWFeatureById<
  TData = Awaited<ReturnType<typeof getWAMDWFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWAMDWFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getWAMDWFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWAMDWFeatureById<
  TData = Awaited<ReturnType<typeof getWAMDWFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single WAM STAC feature
 */

export function useGetWAMDWFeatureById<
  TData = Awaited<ReturnType<typeof getWAMDWFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWAMDWFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWAMDWFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie IG ("Iceland and Greenland") SF ("surface area") files feature collection
 */
export const getHarmonieIgSfCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_sf`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieIgSfCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/harmonie_ig_sf`] as const;
};

export const getGetHarmonieIgSfCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgSfCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgSfCollection>>
  > = ({ signal }) => getHarmonieIgSfCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgSfCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgSfCollection>>
>;
export type GetHarmonieIgSfCollectionQueryError = ErrorType<unknown>;

export function useGetHarmonieIgSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgSfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgSfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie IG ("Iceland and Greenland") SF ("surface area") files feature collection
 */

export function useGetHarmonieIgSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgSfCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE surface area forecast data features from the area of Iceland and Greenland
 */
export const getHarmonieIgSfFeatures = (
  params?: GetHarmonieIgSfFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_sf/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieIgSfFeaturesQueryKey = (
  params?: GetHarmonieIgSfFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_ig_sf/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieIgSfFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgSfFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>
  > = ({ signal }) => getHarmonieIgSfFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgSfFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>
>;
export type GetHarmonieIgSfFeaturesQueryError = ErrorType<unknown>;

export function useGetHarmonieIgSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieIgSfFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE surface area forecast data features from the area of Iceland and Greenland
 */

export function useGetHarmonieIgSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgSfFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieIgSfFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_sf/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieIgSfFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/harmonie_ig_sf/items/${id}`] as const;
};

export const getGetHarmonieIgSfFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgSfFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>
  > = ({ signal }) => getHarmonieIgSfFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgSfFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>
>;
export type GetHarmonieIgSfFeatureByIdQueryError = ErrorType<unknown>;

export function useGetHarmonieIgSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieIgSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgSfFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgSfFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie IG ("Iceland and Greenland") PL ("pressure level") files feature collection
 */
export const getHarmonieIgPlCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_pl`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieIgPlCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/harmonie_ig_pl`] as const;
};

export const getGetHarmonieIgPlCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgPlCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgPlCollection>>
  > = ({ signal }) => getHarmonieIgPlCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgPlCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgPlCollection>>
>;
export type GetHarmonieIgPlCollectionQueryError = ErrorType<unknown>;

export function useGetHarmonieIgPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgPlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgPlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie IG ("Iceland and Greenland") PL ("pressure level") files feature collection
 */

export function useGetHarmonieIgPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgPlCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE pressure level forecast data features from the area of Iceland and Greenland
 */
export const getHarmonieIgPlFeatures = (
  params?: GetHarmonieIgPlFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_pl/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieIgPlFeaturesQueryKey = (
  params?: GetHarmonieIgPlFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_ig_pl/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieIgPlFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgPlFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>
  > = ({ signal }) => getHarmonieIgPlFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgPlFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>
>;
export type GetHarmonieIgPlFeaturesQueryError = ErrorType<unknown>;

export function useGetHarmonieIgPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieIgPlFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE pressure level forecast data features from the area of Iceland and Greenland
 */

export function useGetHarmonieIgPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgPlFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieIgPlFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_pl/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieIgPlFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/harmonie_ig_pl/items/${id}`] as const;
};

export const getGetHarmonieIgPlFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgPlFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>
  > = ({ signal }) => getHarmonieIgPlFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgPlFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>
>;
export type GetHarmonieIgPlFeatureByIdQueryError = ErrorType<unknown>;

export function useGetHarmonieIgPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieIgPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgPlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgPlFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie IG ("Iceland and Greenland") ML ("model level") files feature collection
 */
export const getHarmonieIgMlCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_ml`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieIgMlCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/harmonie_ig_ml`] as const;
};

export const getGetHarmonieIgMlCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgMlCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgMlCollection>>
  > = ({ signal }) => getHarmonieIgMlCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgMlCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgMlCollection>>
>;
export type GetHarmonieIgMlCollectionQueryError = ErrorType<unknown>;

export function useGetHarmonieIgMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgMlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgMlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie IG ("Iceland and Greenland") ML ("model level") files feature collection
 */

export function useGetHarmonieIgMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgMlCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE surface area forecast data features from the area of Iceland and Greenland
 */
export const getHarmonieIgMlFeatures = (
  params?: GetHarmonieIgMlFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_ml/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieIgMlFeaturesQueryKey = (
  params?: GetHarmonieIgMlFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_ig_ml/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieIgMlFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgMlFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>
  > = ({ signal }) => getHarmonieIgMlFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgMlFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>
>;
export type GetHarmonieIgMlFeaturesQueryError = ErrorType<unknown>;

export function useGetHarmonieIgMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieIgMlFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE surface area forecast data features from the area of Iceland and Greenland
 */

export function useGetHarmonieIgMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieIgMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgMlFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieIgMlFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_ig_ml/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieIgMlFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/harmonie_ig_ml/items/${id}`] as const;
};

export const getGetHarmonieIgMlFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieIgMlFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>
  > = ({ signal }) => getHarmonieIgMlFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieIgMlFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>
>;
export type GetHarmonieIgMlFeatureByIdQueryError = ErrorType<unknown>;

export function useGetHarmonieIgMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieIgMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieIgMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieIgMlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieIgMlFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") SF ("surface area") files feature collection
 */
export const getHarmonieDiniSfCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_sf`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniSfCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/harmonie_dini_sf`] as const;
};

export const getGetHarmonieDiniSfCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniSfCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>
  > = ({ signal }) => getHarmonieDiniSfCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniSfCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>
>;
export type GetHarmonieDiniSfCollectionQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") SF ("surface area") files feature collection
 */

export function useGetHarmonieDiniSfCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniSfCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */
export const getHarmonieDiniSfFeatures = (
  params?: GetHarmonieDiniSfFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_sf/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieDiniSfFeaturesQueryKey = (
  params?: GetHarmonieDiniSfFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_sf/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieDiniSfFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniSfFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>
  > = ({ signal }) => getHarmonieDiniSfFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniSfFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>
>;
export type GetHarmonieDiniSfFeaturesQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieDiniSfFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */

export function useGetHarmonieDiniSfFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniSfFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniSfFeaturesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieDiniSfFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_sf/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniSfFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/harmonie_dini_sf/items/${id}`] as const;
};

export const getGetHarmonieDiniSfFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniSfFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>
  > = ({ signal }) => getHarmonieDiniSfFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniSfFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>
>;
export type GetHarmonieDiniSfFeatureByIdQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieDiniSfFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniSfFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniSfFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") PL ("pressure level") files feature collection
 */
export const getHarmonieDiniPlCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_pl`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniPlCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/harmonie_dini_pl`] as const;
};

export const getGetHarmonieDiniPlCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniPlCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>
  > = ({ signal }) => getHarmonieDiniPlCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniPlCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>
>;
export type GetHarmonieDiniPlCollectionQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") PL ("pressure level") files feature collection
 */

export function useGetHarmonieDiniPlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniPlCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE pressure level forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */
export const getHarmonieDiniPlFeatures = (
  params?: GetHarmonieDiniPlFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_pl/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieDiniPlFeaturesQueryKey = (
  params?: GetHarmonieDiniPlFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_pl/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieDiniPlFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniPlFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>
  > = ({ signal }) => getHarmonieDiniPlFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniPlFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>
>;
export type GetHarmonieDiniPlFeaturesQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieDiniPlFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE pressure level forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */

export function useGetHarmonieDiniPlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniPlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniPlFeaturesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieDiniPlFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_pl/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniPlFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/harmonie_dini_pl/items/${id}`] as const;
};

export const getGetHarmonieDiniPlFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniPlFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>
  > = ({ signal }) => getHarmonieDiniPlFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniPlFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>
>;
export type GetHarmonieDiniPlFeatureByIdQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieDiniPlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniPlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniPlFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") ML ("model level") files feature collection
 */
export const getHarmonieDiniMlCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_ml`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniMlCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/harmonie_dini_ml`] as const;
};

export const getGetHarmonieDiniMlCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniMlCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>
  > = ({ signal }) => getHarmonieDiniMlCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniMlCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>
>;
export type GetHarmonieDiniMlCollectionQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") ML ("model level") files feature collection
 */

export function useGetHarmonieDiniMlCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniMlCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE model level forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */
export const getHarmonieDiniMlFeatures = (
  params?: GetHarmonieDiniMlFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_ml/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieDiniMlFeaturesQueryKey = (
  params?: GetHarmonieDiniMlFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_ml/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieDiniMlFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniMlFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>
  > = ({ signal }) => getHarmonieDiniMlFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniMlFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>
>;
export type GetHarmonieDiniMlFeaturesQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieDiniMlFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE model level forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */

export function useGetHarmonieDiniMlFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniMlFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniMlFeaturesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieDiniMlFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_ml/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniMlFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/harmonie_dini_ml/items/${id}`] as const;
};

export const getGetHarmonieDiniMlFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniMlFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>
  > = ({ signal }) => getHarmonieDiniMlFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniMlFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>
>;
export type GetHarmonieDiniMlFeatureByIdQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieDiniMlFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniMlFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniMlFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") EPS ("Ensemble Prediction System") Probabilities files feature collection
 */
export const getHarmonieDiniEpsProbabilitiesCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_probabilities`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsProbabilitiesCollectionQueryKey = () => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_probabilities`
  ] as const;
};

export const getGetHarmonieDiniEpsProbabilitiesCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetHarmonieDiniEpsProbabilitiesCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>
  > = ({ signal }) =>
    getHarmonieDiniEpsProbabilitiesCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsProbabilitiesCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>
>;
export type GetHarmonieDiniEpsProbabilitiesCollectionQueryError =
  ErrorType<unknown>;

export function useGetHarmonieDiniEpsProbabilitiesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsProbabilitiesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsProbabilitiesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") EPS ("Ensemble Prediction System") Probabilities files feature collection
 */

export function useGetHarmonieDiniEpsProbabilitiesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetHarmonieDiniEpsProbabilitiesCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */
export const getHarmonieDiniEpsProbabilitiesFeatures = (
  params?: GetHarmonieDiniEpsProbabilitiesFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_probabilities/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsProbabilitiesFeaturesQueryKey = (
  params?: GetHarmonieDiniEpsProbabilitiesFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_probabilities/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieDiniEpsProbabilitiesFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsProbabilitiesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetHarmonieDiniEpsProbabilitiesFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>
  > = ({ signal }) =>
    getHarmonieDiniEpsProbabilitiesFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsProbabilitiesFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>
>;
export type GetHarmonieDiniEpsProbabilitiesFeaturesQueryError =
  ErrorType<unknown>;

export function useGetHarmonieDiniEpsProbabilitiesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieDiniEpsProbabilitiesFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsProbabilitiesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsProbabilitiesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsProbabilitiesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsProbabilitiesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */

export function useGetHarmonieDiniEpsProbabilitiesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsProbabilitiesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniEpsProbabilitiesFeaturesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieDiniEpsProbabilitiesFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_probabilities/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsProbabilitiesFeatureByIdQueryKey = (
  id: string
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_probabilities/items/${id}`
  ] as const;
};

export const getGetHarmonieDiniEpsProbabilitiesFeatureByIdQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>
  >,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetHarmonieDiniEpsProbabilitiesFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>
  > = ({ signal }) =>
    getHarmonieDiniEpsProbabilitiesFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsProbabilitiesFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>
>;
export type GetHarmonieDiniEpsProbabilitiesFeatureByIdQueryError =
  ErrorType<unknown>;

export function useGetHarmonieDiniEpsProbabilitiesFeatureById<
  TData = Awaited<
    ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>
  >,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>
          >,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsProbabilitiesFeatureById<
  TData = Awaited<
    ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>
  >,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>
          >,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsProbabilitiesFeatureById<
  TData = Awaited<
    ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>
  >,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieDiniEpsProbabilitiesFeatureById<
  TData = Awaited<
    ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>
  >,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsProbabilitiesFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetHarmonieDiniEpsProbabilitiesFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") EPS ("Ensemble Prediction System") Percentiles files feature collection
 */
export const getHarmonieDiniEpsPercentilesCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_percentiles`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsPercentilesCollectionQueryKey = () => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_percentiles`
  ] as const;
};

export const getGetHarmonieDiniEpsPercentilesCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetHarmonieDiniEpsPercentilesCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>
  > = ({ signal }) =>
    getHarmonieDiniEpsPercentilesCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsPercentilesCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>
>;
export type GetHarmonieDiniEpsPercentilesCollectionQueryError =
  ErrorType<unknown>;

export function useGetHarmonieDiniEpsPercentilesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsPercentilesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsPercentilesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") EPS ("Ensemble Prediction System") Percentiles files feature collection
 */

export function useGetHarmonieDiniEpsPercentilesCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetHarmonieDiniEpsPercentilesCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */
export const getHarmonieDiniEpsPercentilesFeatures = (
  params?: GetHarmonieDiniEpsPercentilesFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_percentiles/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsPercentilesFeaturesQueryKey = (
  params?: GetHarmonieDiniEpsPercentilesFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_percentiles/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieDiniEpsPercentilesFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsPercentilesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetHarmonieDiniEpsPercentilesFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>
  > = ({ signal }) =>
    getHarmonieDiniEpsPercentilesFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsPercentilesFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>
>;
export type GetHarmonieDiniEpsPercentilesFeaturesQueryError =
  ErrorType<unknown>;

export function useGetHarmonieDiniEpsPercentilesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieDiniEpsPercentilesFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsPercentilesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsPercentilesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsPercentilesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsPercentilesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */

export function useGetHarmonieDiniEpsPercentilesFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsPercentilesFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniEpsPercentilesFeaturesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieDiniEpsPercentilesFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_percentiles/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsPercentilesFeatureByIdQueryKey = (
  id: string
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_percentiles/items/${id}`
  ] as const;
};

export const getGetHarmonieDiniEpsPercentilesFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetHarmonieDiniEpsPercentilesFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>
  > = ({ signal }) =>
    getHarmonieDiniEpsPercentilesFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsPercentilesFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>
>;
export type GetHarmonieDiniEpsPercentilesFeatureByIdQueryError =
  ErrorType<unknown>;

export function useGetHarmonieDiniEpsPercentilesFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsPercentilesFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsPercentilesFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieDiniEpsPercentilesFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsPercentilesFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniEpsPercentilesFeatureByIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") EPS ("Ensemble Prediction System") Means files feature collection
 */
export const getHarmonieDiniEpsMeansCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_means`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsMeansCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/harmonie_dini_eps_means`] as const;
};

export const getGetHarmonieDiniEpsMeansCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniEpsMeansCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>
  > = ({ signal }) => getHarmonieDiniEpsMeansCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsMeansCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>
>;
export type GetHarmonieDiniEpsMeansCollectionQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniEpsMeansCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsMeansCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsMeansCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about Harmonie DINI ("Denmark Iceland Netherlands Ireland") EPS ("Ensemble Prediction System") Means files feature collection
 */

export function useGetHarmonieDiniEpsMeansCollection<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetHarmonieDiniEpsMeansCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */
export const getHarmonieDiniEpsMeansFeatures = (
  params?: GetHarmonieDiniEpsMeansFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_means/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsMeansFeaturesQueryKey = (
  params?: GetHarmonieDiniEpsMeansFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_means/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetHarmonieDiniEpsMeansFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsMeansFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetHarmonieDiniEpsMeansFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>
  > = ({ signal }) =>
    getHarmonieDiniEpsMeansFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsMeansFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>
>;
export type GetHarmonieDiniEpsMeansFeaturesQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniEpsMeansFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetHarmonieDiniEpsMeansFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsMeansFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsMeansFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsMeansFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsMeansFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get HARMONIE surface area forecast data features from the area of Denmark, Iceland, Netherlands and Ireland
 */

export function useGetHarmonieDiniEpsMeansFeatures<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetHarmonieDiniEpsMeansFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniEpsMeansFeaturesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single HARMONIE STAC feature
 */
export const getHarmonieDiniEpsMeansFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/harmonie_dini_eps_means/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetHarmonieDiniEpsMeansFeatureByIdQueryKey = (id: string) => {
  return [
    `/v1/forecastdata/collections/harmonie_dini_eps_means/items/${id}`
  ] as const;
};

export const getGetHarmonieDiniEpsMeansFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetHarmonieDiniEpsMeansFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>
  > = ({ signal }) =>
    getHarmonieDiniEpsMeansFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHarmonieDiniEpsMeansFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>
>;
export type GetHarmonieDiniEpsMeansFeatureByIdQueryError = ErrorType<unknown>;

export function useGetHarmonieDiniEpsMeansFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsMeansFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHarmonieDiniEpsMeansFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single HARMONIE STAC feature
 */

export function useGetHarmonieDiniEpsMeansFeatureById<
  TData = Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getHarmonieDiniEpsMeansFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHarmonieDiniEpsMeansFeatureByIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about DKSS WS ("Wadden Sea") files feature collection
 */
export const getDkssWsCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/dkss_ws`, method: "GET", signal },
    options
  );
};

export const getGetDkssWsCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/dkss_ws`] as const;
};

export const getGetDkssWsCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getDkssWsCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDkssWsCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDkssWsCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDkssWsCollection>>
  > = ({ signal }) => getDkssWsCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDkssWsCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDkssWsCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDkssWsCollection>>
>;
export type GetDkssWsCollectionQueryError = ErrorType<unknown>;

export function useGetDkssWsCollection<
  TData = Awaited<ReturnType<typeof getDkssWsCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssWsCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssWsCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssWsCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssWsCollection<
  TData = Awaited<ReturnType<typeof getDkssWsCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssWsCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssWsCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssWsCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssWsCollection<
  TData = Awaited<ReturnType<typeof getDkssWsCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssWsCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about DKSS WS ("Wadden Sea") files feature collection
 */

export function useGetDkssWsCollection<
  TData = Awaited<ReturnType<typeof getDkssWsCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssWsCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDkssWsCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "Wadden Sea"
 */
export const getDKSSWSFeatures = (
  params?: GetDKSSWSFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/dkss_ws/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetDKSSWSFeaturesQueryKey = (
  params?: GetDKSSWSFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/dkss_ws/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetDKSSWSFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSWSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSWSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSWSFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSWSFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSWSFeatures>>
  > = ({ signal }) => getDKSSWSFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSWSFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSWSFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSWSFeatures>>
>;
export type GetDKSSWSFeaturesQueryError = ErrorType<unknown>;

export function useGetDKSSWSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSWSFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetDKSSWSFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSWSFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSWSFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSWSFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSWSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSWSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSWSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSWSFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSWSFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSWSFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSWSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSWSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSWSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSWSFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "Wadden Sea"
 */

export function useGetDKSSWSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSWSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSWSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSWSFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSWSFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single DKSS STAC feature
 */
export const getDKSSNSBFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/dkss_ws/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetDKSSNSBFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/dkss_ws/items/${id}`] as const;
};

export const getGetDKSSNSBFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSNSBFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById>>
  > = ({ signal }) => getDKSSNSBFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSNSBFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSNSBFeatureById>>
>;
export type GetDKSSNSBFeatureByIdQueryError = ErrorType<unknown>;

export function useGetDKSSNSBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single DKSS STAC feature
 */

export function useGetDKSSNSBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSNSBFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about DKSS NSBS ("North Sea Baltic Sea") files feature collection
 */
export const getDkssNsbsCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/dkss_nsbs`, method: "GET", signal },
    options
  );
};

export const getGetDkssNsbsCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/dkss_nsbs`] as const;
};

export const getGetDkssNsbsCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getDkssNsbsCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDkssNsbsCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDkssNsbsCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDkssNsbsCollection>>
  > = ({ signal }) => getDkssNsbsCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDkssNsbsCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDkssNsbsCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDkssNsbsCollection>>
>;
export type GetDkssNsbsCollectionQueryError = ErrorType<unknown>;

export function useGetDkssNsbsCollection<
  TData = Awaited<ReturnType<typeof getDkssNsbsCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssNsbsCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssNsbsCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssNsbsCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssNsbsCollection<
  TData = Awaited<ReturnType<typeof getDkssNsbsCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssNsbsCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssNsbsCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssNsbsCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssNsbsCollection<
  TData = Awaited<ReturnType<typeof getDkssNsbsCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssNsbsCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about DKSS NSBS ("North Sea Baltic Sea") files feature collection
 */

export function useGetDkssNsbsCollection<
  TData = Awaited<ReturnType<typeof getDkssNsbsCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssNsbsCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDkssNsbsCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "North Sea Baltic Sea"
 */
export const getDKSSNSBSFeatures = (
  params?: GetDKSSNSBSFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/dkss_nsbs/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetDKSSNSBSFeaturesQueryKey = (
  params?: GetDKSSNSBSFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/dkss_nsbs/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetDKSSNSBSFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSNSBSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSNSBSFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSNSBSFeatures>>
  > = ({ signal }) => getDKSSNSBSFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSNSBSFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSNSBSFeatures>>
>;
export type GetDKSSNSBSFeaturesQueryError = ErrorType<unknown>;

export function useGetDKSSNSBSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetDKSSNSBSFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBSFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSNSBSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBSFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSNSBSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "North Sea Baltic Sea"
 */

export function useGetDKSSNSBSFeatures<
  TData = Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSNSBSFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBSFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSNSBSFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single DKSS STAC feature
 */
export const getDKSSNSBFeatureById1 = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/dkss_nsbs/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetDKSSNSBFeatureById1QueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/dkss_nsbs/items/${id}`] as const;
};

export const getGetDKSSNSBFeatureById1QueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSNSBFeatureById1QueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>
  > = ({ signal }) => getDKSSNSBFeatureById1(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSNSBFeatureById1QueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>
>;
export type GetDKSSNSBFeatureById1QueryError = ErrorType<unknown>;

export function useGetDKSSNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single DKSS STAC feature
 */

export function useGetDKSSNSBFeatureById1<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById1>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSNSBFeatureById1QueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about DKSS LF ("Limfjord") files feature collection
 */
export const getDkssLfCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/dkss_lf`, method: "GET", signal },
    options
  );
};

export const getGetDkssLfCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/dkss_lf`] as const;
};

export const getGetDkssLfCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getDkssLfCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDkssLfCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDkssLfCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDkssLfCollection>>
  > = ({ signal }) => getDkssLfCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDkssLfCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDkssLfCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDkssLfCollection>>
>;
export type GetDkssLfCollectionQueryError = ErrorType<unknown>;

export function useGetDkssLfCollection<
  TData = Awaited<ReturnType<typeof getDkssLfCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssLfCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssLfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssLfCollection<
  TData = Awaited<ReturnType<typeof getDkssLfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssLfCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssLfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssLfCollection<
  TData = Awaited<ReturnType<typeof getDkssLfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about DKSS LF ("Limfjord") files feature collection
 */

export function useGetDkssLfCollection<
  TData = Awaited<ReturnType<typeof getDkssLfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDkssLfCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "Limfjord"
 */
export const getDKSSLFFeatures = (
  params?: GetDKSSLFFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/dkss_lf/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetDKSSLFFeaturesQueryKey = (
  params?: GetDKSSLFFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/dkss_lf/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetDKSSLFFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSLFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLFFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSLFFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSLFFeatures>>
  > = ({ signal }) => getDKSSLFFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSLFFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSLFFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSLFFeatures>>
>;
export type GetDKSSLFFeaturesQueryError = ErrorType<unknown>;

export function useGetDKSSLFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLFFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetDKSSLFFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLFFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSLFFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSLFFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSLFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLFFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSLFFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSLFFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSLFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLFFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "Limfjord"
 */

export function useGetDKSSLFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLFFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSLFFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single DKSS STAC feature
 */
export const getDKSSNSBFeatureById2 = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/dkss_lf/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetDKSSNSBFeatureById2QueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/dkss_lf/items/${id}`] as const;
};

export const getGetDKSSNSBFeatureById2QueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSNSBFeatureById2QueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>
  > = ({ signal }) => getDKSSNSBFeatureById2(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSNSBFeatureById2QueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>
>;
export type GetDKSSNSBFeatureById2QueryError = ErrorType<unknown>;

export function useGetDKSSNSBFeatureById2<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById2<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById2<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single DKSS STAC feature
 */

export function useGetDKSSNSBFeatureById2<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSNSBFeatureById2QueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about DKSS LB ("Little Belt") files feature collection
 */
export const getDkssLbCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/dkss_lb`, method: "GET", signal },
    options
  );
};

export const getGetDkssLbCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/dkss_lb`] as const;
};

export const getGetDkssLbCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getDkssLbCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDkssLbCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDkssLbCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDkssLbCollection>>
  > = ({ signal }) => getDkssLbCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDkssLbCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDkssLbCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDkssLbCollection>>
>;
export type GetDkssLbCollectionQueryError = ErrorType<unknown>;

export function useGetDkssLbCollection<
  TData = Awaited<ReturnType<typeof getDkssLbCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLbCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssLbCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssLbCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssLbCollection<
  TData = Awaited<ReturnType<typeof getDkssLbCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLbCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssLbCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssLbCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssLbCollection<
  TData = Awaited<ReturnType<typeof getDkssLbCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLbCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about DKSS LB ("Little Belt") files feature collection
 */

export function useGetDkssLbCollection<
  TData = Awaited<ReturnType<typeof getDkssLbCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssLbCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDkssLbCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "Little Belt"
 */
export const getDKSSLBFeatures = (
  params?: GetDKSSLBFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/dkss_lb/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetDKSSLBFeaturesQueryKey = (
  params?: GetDKSSLBFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/dkss_lb/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetDKSSLBFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSLBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSLBFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSLBFeatures>>
  > = ({ signal }) => getDKSSLBFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSLBFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSLBFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSLBFeatures>>
>;
export type GetDKSSLBFeaturesQueryError = ErrorType<unknown>;

export function useGetDKSSLBFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetDKSSLBFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSLBFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSLBFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSLBFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSLBFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSLBFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSLBFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "Little Belt"
 */

export function useGetDKSSLBFeatures<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSLBFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSLBFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single DKSS STAC feature
 */
export const getDKSSLBFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/dkss_lb/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetDKSSLBFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/dkss_lb/items/${id}`] as const;
};

export const getGetDKSSLBFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSLBFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSLBFeatureById>>
  > = ({ signal }) => getDKSSLBFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSLBFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSLBFeatureById>>
>;
export type GetDKSSLBFeatureByIdQueryError = ErrorType<unknown>;

export function useGetDKSSLBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getDKSSLBFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSLBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getDKSSLBFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSLBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single DKSS STAC feature
 */

export function useGetDKSSLBFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSLBFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSLBFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about DKSS IF ("Roskilde/Isefjord") files feature collection
 */
export const getDkssIfCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/dkss_if`, method: "GET", signal },
    options
  );
};

export const getGetDkssIfCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/dkss_if`] as const;
};

export const getGetDkssIfCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getDkssIfCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDkssIfCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDkssIfCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDkssIfCollection>>
  > = ({ signal }) => getDkssIfCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDkssIfCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDkssIfCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDkssIfCollection>>
>;
export type GetDkssIfCollectionQueryError = ErrorType<unknown>;

export function useGetDkssIfCollection<
  TData = Awaited<ReturnType<typeof getDkssIfCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssIfCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssIfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssIfCollection<
  TData = Awaited<ReturnType<typeof getDkssIfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIfCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssIfCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssIfCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssIfCollection<
  TData = Awaited<ReturnType<typeof getDkssIfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about DKSS IF ("Roskilde/Isefjord") files feature collection
 */

export function useGetDkssIfCollection<
  TData = Awaited<ReturnType<typeof getDkssIfCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIfCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDkssIfCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "Roskilde/Isefjord"
 */
export const getDKSSIFFeatures = (
  params?: GetDKSSIFFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/dkss_if/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetDKSSIFFeaturesQueryKey = (
  params?: GetDKSSIFFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/dkss_if/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetDKSSIFFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSIFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSIFFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSIFFeatures>>
  > = ({ signal }) => getDKSSIFFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSIFFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSIFFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSIFFeatures>>
>;
export type GetDKSSIFFeaturesQueryError = ErrorType<unknown>;

export function useGetDKSSIFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetDKSSIFFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSIFFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSIFFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSIFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSIFFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSIFFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSIFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "Roskilde/Isefjord"
 */

export function useGetDKSSIFFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIFFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSIFFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single DKSS STAC feature
 */
export const getDKSSIFFeatureById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/dkss_if/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetDKSSIFFeatureByIdQueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/dkss_if/items/${id}`] as const;
};

export const getGetDKSSIFFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSIFFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSIFFeatureById>>
  > = ({ signal }) => getDKSSIFFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSIFFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSIFFeatureById>>
>;
export type GetDKSSIFFeatureByIdQueryError = ErrorType<unknown>;

export function useGetDKSSIFFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getDKSSIFFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSIFFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getDKSSIFFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSIFFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single DKSS STAC feature
 */

export function useGetDKSSIFFeatureById<
  TData = Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIFFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSIFFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about DKSS IDW ("Inner Danish Waters") files feature collection
 */
export const getDkssIdwCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Collection>(
    { url: `/v1/forecastdata/collections/dkss_idw`, method: "GET", signal },
    options
  );
};

export const getGetDkssIdwCollectionQueryKey = () => {
  return [`/v1/forecastdata/collections/dkss_idw`] as const;
};

export const getGetDkssIdwCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getDkssIdwCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDkssIdwCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDkssIdwCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDkssIdwCollection>>
  > = ({ signal }) => getDkssIdwCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDkssIdwCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDkssIdwCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDkssIdwCollection>>
>;
export type GetDkssIdwCollectionQueryError = ErrorType<unknown>;

export function useGetDkssIdwCollection<
  TData = Awaited<ReturnType<typeof getDkssIdwCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIdwCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssIdwCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssIdwCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssIdwCollection<
  TData = Awaited<ReturnType<typeof getDkssIdwCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIdwCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDkssIdwCollection>>,
          TError,
          Awaited<ReturnType<typeof getDkssIdwCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDkssIdwCollection<
  TData = Awaited<ReturnType<typeof getDkssIdwCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIdwCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about DKSS IDW ("Inner Danish Waters") files feature collection
 */

export function useGetDkssIdwCollection<
  TData = Awaited<ReturnType<typeof getDkssIdwCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDkssIdwCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDkssIdwCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get forecast data features from the area "Inner Danish Waters"
 */
export const getDKSSIDWFeatures = (
  params?: GetDKSSIDWFeaturesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FeatureCollection>(
    {
      url: `/v1/forecastdata/collections/dkss_idw/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetDKSSIDWFeaturesQueryKey = (
  params?: GetDKSSIDWFeaturesParams
) => {
  return [
    `/v1/forecastdata/collections/dkss_idw/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetDKSSIDWFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSIDWFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSIDWFeatures>>
  > = ({ signal }) => getDKSSIDWFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSIDWFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSIDWFeatures>>
>;
export type GetDKSSIDWFeaturesQueryError = ErrorType<unknown>;

export function useGetDKSSIDWFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetDKSSIDWFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSIDWFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSIDWFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
          TError,
          Awaited<ReturnType<typeof getDKSSIDWFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSIDWFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data features from the area "Inner Danish Waters"
 */

export function useGetDKSSIDWFeatures<
  TData = Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetDKSSIDWFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSIDWFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSIDWFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single DKSS STAC feature
 */
export const getDKSSNSBFeatureById3 = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Feature>(
    {
      url: `/v1/forecastdata/collections/dkss_idw/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetDKSSNSBFeatureById3QueryKey = (id: string) => {
  return [`/v1/forecastdata/collections/dkss_idw/items/${id}`] as const;
};

export const getGetDKSSNSBFeatureById3QueryOptions = <
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDKSSNSBFeatureById3QueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>
  > = ({ signal }) => getDKSSNSBFeatureById3(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDKSSNSBFeatureById3QueryResult = NonNullable<
  Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>
>;
export type GetDKSSNSBFeatureById3QueryError = ErrorType<unknown>;

export function useGetDKSSNSBFeatureById3<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById3<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
          TError,
          Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDKSSNSBFeatureById3<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single DKSS STAC feature
 */

export function useGetDKSSNSBFeatureById3<
  TData = Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDKSSNSBFeatureById3>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDKSSNSBFeatureById3QueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Landing page for service
 */
export const getLandingPage = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<LandingPage>(
    { url: `/v1/forecastdata/`, method: "GET", signal },
    options
  );
};

export const getGetLandingPageQueryKey = () => {
  return [`/v1/forecastdata/`] as const;
};

export const getGetLandingPageQueryOptions = <
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLandingPageQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLandingPage>>> = ({
    signal
  }) => getLandingPage(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLandingPage>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLandingPageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLandingPage>>
>;
export type GetLandingPageQueryError = ErrorType<unknown>;

export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLandingPage>>,
          TError,
          Awaited<ReturnType<typeof getLandingPage>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLandingPage>>,
          TError,
          Awaited<ReturnType<typeof getLandingPage>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Landing page for service
 */

export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLandingPageQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
