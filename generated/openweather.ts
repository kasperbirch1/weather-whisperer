/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * OpenWeatherMap API
 * Weather data API
 * OpenAPI spec version: 2.5.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query";

import type {
  CurrentWeatherResponse,
  ForecastResponse,
  GetCurrentWeatherParams,
  GetForecastParams
} from "./openweather-schemas";

import { openWeatherMutator } from "../mutator/openweather-mutator";
import type { ErrorType } from "../mutator/openweather-mutator";
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Access current weather data for any location
 * @summary Get current weather data
 */
export const getCurrentWeather = (
  params: GetCurrentWeatherParams,
  options?: SecondParameter<typeof openWeatherMutator>,
  signal?: AbortSignal
) => {
  return openWeatherMutator<CurrentWeatherResponse>(
    { url: `/weather`, method: "GET", params, signal },
    options
  );
};

export const getGetCurrentWeatherQueryKey = (
  params: GetCurrentWeatherParams
) => {
  return [`/weather`, ...(params ? [params] : [])] as const;
};

export const getGetCurrentWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentWeather>>,
  TError = ErrorType<void>
>(
  params: GetCurrentWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof openWeatherMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCurrentWeatherQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentWeather>>
  > = ({ signal }) => getCurrentWeather(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentWeather>>
>;
export type GetCurrentWeatherQueryError = ErrorType<void>;

export function useGetCurrentWeather<
  TData = Awaited<ReturnType<typeof getCurrentWeather>>,
  TError = ErrorType<void>
>(
  params: GetCurrentWeatherParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentWeather>>,
          TError,
          Awaited<ReturnType<typeof getCurrentWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentWeather<
  TData = Awaited<ReturnType<typeof getCurrentWeather>>,
  TError = ErrorType<void>
>(
  params: GetCurrentWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentWeather>>,
          TError,
          Awaited<ReturnType<typeof getCurrentWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentWeather<
  TData = Awaited<ReturnType<typeof getCurrentWeather>>,
  TError = ErrorType<void>
>(
  params: GetCurrentWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get current weather data
 */

export function useGetCurrentWeather<
  TData = Awaited<ReturnType<typeof getCurrentWeather>>,
  TError = ErrorType<void>
>(
  params: GetCurrentWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentWeatherQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 5 day forecast with 3 hour step
 * @summary Get 5 day weather forecast
 */
export const getForecast = (
  params: GetForecastParams,
  options?: SecondParameter<typeof openWeatherMutator>,
  signal?: AbortSignal
) => {
  return openWeatherMutator<ForecastResponse>(
    { url: `/forecast`, method: "GET", params, signal },
    options
  );
};

export const getGetForecastQueryKey = (params: GetForecastParams) => {
  return [`/forecast`, ...(params ? [params] : [])] as const;
};

export const getGetForecastQueryOptions = <
  TData = Awaited<ReturnType<typeof getForecast>>,
  TError = ErrorType<unknown>
>(
  params: GetForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getForecast>>, TError, TData>
    >;
    request?: SecondParameter<typeof openWeatherMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetForecastQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getForecast>>> = ({
    signal
  }) => getForecast(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getForecast>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetForecastQueryResult = NonNullable<
  Awaited<ReturnType<typeof getForecast>>
>;
export type GetForecastQueryError = ErrorType<unknown>;

export function useGetForecast<
  TData = Awaited<ReturnType<typeof getForecast>>,
  TError = ErrorType<unknown>
>(
  params: GetForecastParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getForecast>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getForecast>>,
          TError,
          Awaited<ReturnType<typeof getForecast>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetForecast<
  TData = Awaited<ReturnType<typeof getForecast>>,
  TError = ErrorType<unknown>
>(
  params: GetForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getForecast>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getForecast>>,
          TError,
          Awaited<ReturnType<typeof getForecast>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetForecast<
  TData = Awaited<ReturnType<typeof getForecast>>,
  TError = ErrorType<unknown>
>(
  params: GetForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getForecast>>, TError, TData>
    >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get 5 day weather forecast
 */

export function useGetForecast<
  TData = Awaited<ReturnType<typeof getForecast>>,
  TError = ErrorType<unknown>
>(
  params: GetForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getForecast>>, TError, TData>
    >;
    request?: SecondParameter<typeof openWeatherMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetForecastQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
