/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Weather API
 * # Introduction
WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:    
- Real-time weather
- 14 day weather forecast
- Historical Weather
- Marine Weather and Tide Data
- Future Weather (Upto 365 days ahead)
- Daily and hourly intervals
- 15 min interval (Enterprise only)
- Astronomy
- Time zone
- Location data
- Sports
- Search or Autocomplete API
- Weather Alerts
- Air Quality Data
- Bulk Request

# Getting Started  

You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!

Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).

We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.

If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).  

# Authentication  

API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  

Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .    

##  key parameter 
key=YOUR API KEY 

 * OpenAPI spec version: 1.0.2
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query";

import type {
  ArrayOfSearch,
  Astronomy200One,
  Astronomy200Two,
  AstronomyParams,
  ForecastWeather200One,
  ForecastWeather200Two,
  ForecastWeatherParams,
  FutureWeather200One,
  FutureWeather200Two,
  FutureWeatherParams,
  HistoryWeather200One,
  HistoryWeather200Two,
  HistoryWeatherParams,
  Ip,
  IpLookupParams,
  Location,
  MarineWeather200One,
  MarineWeather200Two,
  MarineWeatherParams,
  N400Response,
  N401Response,
  N403Response,
  RealtimeWeather200One,
  RealtimeWeather200Two,
  RealtimeWeatherParams,
  SearchAutocompleteWeatherParams,
  TimeZoneParams
} from "./weatherapi-schemas";

import { weatherApiMutator } from "../mutator/weatherapi-mutator";
import type { ErrorType } from "../mutator/weatherapi-mutator";
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.<br /><br />Current object contains current or realtime weather information for a given city.
 * @summary Realtime API
 */
export const realtimeWeather = (
  params: RealtimeWeatherParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<RealtimeWeather200One | RealtimeWeather200Two>(
    { url: `/current.json`, method: "GET", params, signal },
    options
  );
};

export const getRealtimeWeatherQueryKey = (params: RealtimeWeatherParams) => {
  return [`/current.json`, ...(params ? [params] : [])] as const;
};

export const getRealtimeWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof realtimeWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: RealtimeWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof realtimeWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRealtimeWeatherQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof realtimeWeather>>> = ({
    signal
  }) => realtimeWeather(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof realtimeWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RealtimeWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof realtimeWeather>>
>;
export type RealtimeWeatherQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useRealtimeWeather<
  TData = Awaited<ReturnType<typeof realtimeWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: RealtimeWeatherParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof realtimeWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof realtimeWeather>>,
          TError,
          Awaited<ReturnType<typeof realtimeWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRealtimeWeather<
  TData = Awaited<ReturnType<typeof realtimeWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: RealtimeWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof realtimeWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof realtimeWeather>>,
          TError,
          Awaited<ReturnType<typeof realtimeWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRealtimeWeather<
  TData = Awaited<ReturnType<typeof realtimeWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: RealtimeWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof realtimeWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Realtime API
 */

export function useRealtimeWeather<
  TData = Awaited<ReturnType<typeof realtimeWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: RealtimeWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof realtimeWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRealtimeWeatherQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.<br /><br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
 * @summary Forecast API
 */
export const forecastWeather = (
  params: ForecastWeatherParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<ForecastWeather200One | ForecastWeather200Two>(
    { url: `/forecast.json`, method: "GET", params, signal },
    options
  );
};

export const getForecastWeatherQueryKey = (params: ForecastWeatherParams) => {
  return [`/forecast.json`, ...(params ? [params] : [])] as const;
};

export const getForecastWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof forecastWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: ForecastWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof forecastWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getForecastWeatherQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof forecastWeather>>> = ({
    signal
  }) => forecastWeather(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof forecastWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ForecastWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof forecastWeather>>
>;
export type ForecastWeatherQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useForecastWeather<
  TData = Awaited<ReturnType<typeof forecastWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: ForecastWeatherParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof forecastWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof forecastWeather>>,
          TError,
          Awaited<ReturnType<typeof forecastWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useForecastWeather<
  TData = Awaited<ReturnType<typeof forecastWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: ForecastWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof forecastWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof forecastWeather>>,
          TError,
          Awaited<ReturnType<typeof forecastWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useForecastWeather<
  TData = Awaited<ReturnType<typeof forecastWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: ForecastWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof forecastWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Forecast API
 */

export function useForecastWeather<
  TData = Awaited<ReturnType<typeof forecastWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: ForecastWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof forecastWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getForecastWeatherQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
 * @summary Future API
 */
export const futureWeather = (
  params: FutureWeatherParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<FutureWeather200One | FutureWeather200Two>(
    { url: `/future.json`, method: "GET", params, signal },
    options
  );
};

export const getFutureWeatherQueryKey = (params: FutureWeatherParams) => {
  return [`/future.json`, ...(params ? [params] : [])] as const;
};

export const getFutureWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof futureWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: FutureWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof futureWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFutureWeatherQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof futureWeather>>> = ({
    signal
  }) => futureWeather(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof futureWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FutureWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof futureWeather>>
>;
export type FutureWeatherQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useFutureWeather<
  TData = Awaited<ReturnType<typeof futureWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: FutureWeatherParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof futureWeather>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof futureWeather>>,
          TError,
          Awaited<ReturnType<typeof futureWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFutureWeather<
  TData = Awaited<ReturnType<typeof futureWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: FutureWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof futureWeather>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof futureWeather>>,
          TError,
          Awaited<ReturnType<typeof futureWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFutureWeather<
  TData = Awaited<ReturnType<typeof futureWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: FutureWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof futureWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Future API
 */

export function useFutureWeather<
  TData = Awaited<ReturnType<typeof futureWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: FutureWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof futureWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFutureWeatherQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object.
 * @summary History API
 */
export const historyWeather = (
  params: HistoryWeatherParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<HistoryWeather200One | HistoryWeather200Two>(
    { url: `/history.json`, method: "GET", params, signal },
    options
  );
};

export const getHistoryWeatherQueryKey = (params: HistoryWeatherParams) => {
  return [`/history.json`, ...(params ? [params] : [])] as const;
};

export const getHistoryWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof historyWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: HistoryWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof historyWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHistoryWeatherQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof historyWeather>>> = ({
    signal
  }) => historyWeather(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof historyWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HistoryWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof historyWeather>>
>;
export type HistoryWeatherQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useHistoryWeather<
  TData = Awaited<ReturnType<typeof historyWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: HistoryWeatherParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof historyWeather>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof historyWeather>>,
          TError,
          Awaited<ReturnType<typeof historyWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHistoryWeather<
  TData = Awaited<ReturnType<typeof historyWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: HistoryWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof historyWeather>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof historyWeather>>,
          TError,
          Awaited<ReturnType<typeof historyWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHistoryWeather<
  TData = Awaited<ReturnType<typeof historyWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: HistoryWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof historyWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary History API
 */

export function useHistoryWeather<
  TData = Awaited<ReturnType<typeof historyWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: HistoryWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof historyWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHistoryWeatherQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Marine weather API method returns upto next 7 day (depending upon your price plan level) marine and sailing weather forecast and tide data (depending upon your price plan level) as json or xml. The data is returned as a Marine Object.<br /><br />Marine object, depending upon your price plan level, contains astronomy data, day weather forecast and hourly interval weather information and tide data for a given sea/ocean point.
 * @summary Marine Weather API
 */
export const marineWeather = (
  params: MarineWeatherParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<MarineWeather200One | MarineWeather200Two>(
    { url: `/marine.json`, method: "GET", params, signal },
    options
  );
};

export const getMarineWeatherQueryKey = (params: MarineWeatherParams) => {
  return [`/marine.json`, ...(params ? [params] : [])] as const;
};

export const getMarineWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof marineWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: MarineWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof marineWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMarineWeatherQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof marineWeather>>> = ({
    signal
  }) => marineWeather(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof marineWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MarineWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof marineWeather>>
>;
export type MarineWeatherQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useMarineWeather<
  TData = Awaited<ReturnType<typeof marineWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: MarineWeatherParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof marineWeather>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof marineWeather>>,
          TError,
          Awaited<ReturnType<typeof marineWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMarineWeather<
  TData = Awaited<ReturnType<typeof marineWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: MarineWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof marineWeather>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof marineWeather>>,
          TError,
          Awaited<ReturnType<typeof marineWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMarineWeather<
  TData = Awaited<ReturnType<typeof marineWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: MarineWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof marineWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Marine Weather API
 */

export function useMarineWeather<
  TData = Awaited<ReturnType<typeof marineWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: MarineWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof marineWeather>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMarineWeatherQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.
 * @summary Search/Autocomplete API
 */
export const searchAutocompleteWeather = (
  params: SearchAutocompleteWeatherParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<ArrayOfSearch>(
    { url: `/search.json`, method: "GET", params, signal },
    options
  );
};

export const getSearchAutocompleteWeatherQueryKey = (
  params: SearchAutocompleteWeatherParams
) => {
  return [`/search.json`, ...(params ? [params] : [])] as const;
};

export const getSearchAutocompleteWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof searchAutocompleteWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: SearchAutocompleteWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchAutocompleteWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchAutocompleteWeatherQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchAutocompleteWeather>>
  > = ({ signal }) => searchAutocompleteWeather(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchAutocompleteWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchAutocompleteWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchAutocompleteWeather>>
>;
export type SearchAutocompleteWeatherQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useSearchAutocompleteWeather<
  TData = Awaited<ReturnType<typeof searchAutocompleteWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: SearchAutocompleteWeatherParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchAutocompleteWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAutocompleteWeather>>,
          TError,
          Awaited<ReturnType<typeof searchAutocompleteWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchAutocompleteWeather<
  TData = Awaited<ReturnType<typeof searchAutocompleteWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: SearchAutocompleteWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchAutocompleteWeather>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAutocompleteWeather>>,
          TError,
          Awaited<ReturnType<typeof searchAutocompleteWeather>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchAutocompleteWeather<
  TData = Awaited<ReturnType<typeof searchAutocompleteWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: SearchAutocompleteWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchAutocompleteWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search/Autocomplete API
 */

export function useSearchAutocompleteWeather<
  TData = Awaited<ReturnType<typeof searchAutocompleteWeather>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: SearchAutocompleteWeatherParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchAutocompleteWeather>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchAutocompleteWeatherQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * IP Lookup API method allows a user to get up to date information for an IP address.
 * @summary IP Lookup API
 */
export const ipLookup = (
  params: IpLookupParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<Ip>(
    { url: `/ip.json`, method: "GET", params, signal },
    options
  );
};

export const getIpLookupQueryKey = (params: IpLookupParams) => {
  return [`/ip.json`, ...(params ? [params] : [])] as const;
};

export const getIpLookupQueryOptions = <
  TData = Awaited<ReturnType<typeof ipLookup>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: IpLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ipLookup>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIpLookupQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ipLookup>>> = ({
    signal
  }) => ipLookup(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ipLookup>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IpLookupQueryResult = NonNullable<
  Awaited<ReturnType<typeof ipLookup>>
>;
export type IpLookupQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useIpLookup<
  TData = Awaited<ReturnType<typeof ipLookup>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: IpLookupParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ipLookup>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ipLookup>>,
          TError,
          Awaited<ReturnType<typeof ipLookup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIpLookup<
  TData = Awaited<ReturnType<typeof ipLookup>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: IpLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ipLookup>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ipLookup>>,
          TError,
          Awaited<ReturnType<typeof ipLookup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIpLookup<
  TData = Awaited<ReturnType<typeof ipLookup>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: IpLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ipLookup>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary IP Lookup API
 */

export function useIpLookup<
  TData = Awaited<ReturnType<typeof ipLookup>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: IpLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ipLookup>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getIpLookupQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return Location Object
 * @summary Time Zone API
 */
export const timeZone = (
  params: TimeZoneParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<Location>(
    { url: `/timezone.json`, method: "GET", params, signal },
    options
  );
};

export const getTimeZoneQueryKey = (params: TimeZoneParams) => {
  return [`/timezone.json`, ...(params ? [params] : [])] as const;
};

export const getTimeZoneQueryOptions = <
  TData = Awaited<ReturnType<typeof timeZone>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: TimeZoneParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof timeZone>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTimeZoneQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timeZone>>> = ({
    signal
  }) => timeZone(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof timeZone>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TimeZoneQueryResult = NonNullable<
  Awaited<ReturnType<typeof timeZone>>
>;
export type TimeZoneQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useTimeZone<
  TData = Awaited<ReturnType<typeof timeZone>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: TimeZoneParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof timeZone>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timeZone>>,
          TError,
          Awaited<ReturnType<typeof timeZone>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTimeZone<
  TData = Awaited<ReturnType<typeof timeZone>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: TimeZoneParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof timeZone>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timeZone>>,
          TError,
          Awaited<ReturnType<typeof timeZone>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTimeZone<
  TData = Awaited<ReturnType<typeof timeZone>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: TimeZoneParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof timeZone>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Time Zone API
 */

export function useTimeZone<
  TData = Awaited<ReturnType<typeof timeZone>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: TimeZoneParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof timeZone>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTimeZoneQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return Location and Astronomy Object
 * @summary Astronomy API
 */
export const astronomy = (
  params: AstronomyParams,
  options?: SecondParameter<typeof weatherApiMutator>,
  signal?: AbortSignal
) => {
  return weatherApiMutator<Astronomy200One | Astronomy200Two>(
    { url: `/astronomy.json`, method: "GET", params, signal },
    options
  );
};

export const getAstronomyQueryKey = (params: AstronomyParams) => {
  return [`/astronomy.json`, ...(params ? [params] : [])] as const;
};

export const getAstronomyQueryOptions = <
  TData = Awaited<ReturnType<typeof astronomy>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: AstronomyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof astronomy>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAstronomyQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof astronomy>>> = ({
    signal
  }) => astronomy(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof astronomy>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AstronomyQueryResult = NonNullable<
  Awaited<ReturnType<typeof astronomy>>
>;
export type AstronomyQueryError = ErrorType<
  N400Response | N401Response | N403Response
>;

export function useAstronomy<
  TData = Awaited<ReturnType<typeof astronomy>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: AstronomyParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof astronomy>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof astronomy>>,
          TError,
          Awaited<ReturnType<typeof astronomy>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAstronomy<
  TData = Awaited<ReturnType<typeof astronomy>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: AstronomyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof astronomy>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof astronomy>>,
          TError,
          Awaited<ReturnType<typeof astronomy>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAstronomy<
  TData = Awaited<ReturnType<typeof astronomy>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: AstronomyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof astronomy>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Astronomy API
 */

export function useAstronomy<
  TData = Awaited<ReturnType<typeof astronomy>>,
  TError = ErrorType<N400Response | N401Response | N403Response>
>(
  params: AstronomyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof astronomy>>, TError, TData>
    >;
    request?: SecondParameter<typeof weatherApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAstronomyQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
