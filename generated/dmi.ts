/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * DMI (Danish Meteorological Institute) API
 * Weather, ocean, lightning, climate and forecast data from DMI
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query";

import type {
  ClimateDataResponse,
  ForecastResponse,
  GetClimateDataParams,
  GetForecastByPositionParams,
  GetLightningDataParams,
  GetMetObservationsParams,
  GetOceanObservationsParams,
  LightningDataResponse,
  MetObservationResponse,
  OceanObservationResponse
} from "./dmi-schemas";

import { dmiMutator } from "../mutator/dmi-mutator";
import type { ErrorType } from "../mutator/dmi-mutator";
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Access ocean observation data including water temperature, wave height, and salinity
 * @summary Get ocean observations
 */
export const getOceanObservations = (
  params?: GetOceanObservationsParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<OceanObservationResponse>(
    {
      url: `/oceanObs/collections/observation/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetOceanObservationsQueryKey = (
  params?: GetOceanObservationsParams
) => {
  return [
    `/oceanObs/collections/observation/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetOceanObservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOceanObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetOceanObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOceanObservations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOceanObservationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOceanObservations>>
  > = ({ signal }) => getOceanObservations(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOceanObservations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOceanObservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOceanObservations>>
>;
export type GetOceanObservationsQueryError = ErrorType<unknown>;

export function useGetOceanObservations<
  TData = Awaited<ReturnType<typeof getOceanObservations>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetOceanObservationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOceanObservations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOceanObservations>>,
          TError,
          Awaited<ReturnType<typeof getOceanObservations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOceanObservations<
  TData = Awaited<ReturnType<typeof getOceanObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetOceanObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOceanObservations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOceanObservations>>,
          TError,
          Awaited<ReturnType<typeof getOceanObservations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOceanObservations<
  TData = Awaited<ReturnType<typeof getOceanObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetOceanObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOceanObservations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get ocean observations
 */

export function useGetOceanObservations<
  TData = Awaited<ReturnType<typeof getOceanObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetOceanObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOceanObservations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOceanObservationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Access weather observation data including temperature, wind, pressure, humidity
 * @summary Get meteorological observations
 */
export const getMetObservations = (
  params?: GetMetObservationsParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<MetObservationResponse>(
    {
      url: `/metObs/collections/observation/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetMetObservationsQueryKey = (
  params?: GetMetObservationsParams
) => {
  return [
    `/metObs/collections/observation/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetMetObservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getMetObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetMetObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMetObservations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMetObservationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMetObservations>>
  > = ({ signal }) => getMetObservations(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMetObservations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMetObservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMetObservations>>
>;
export type GetMetObservationsQueryError = ErrorType<unknown>;

export function useGetMetObservations<
  TData = Awaited<ReturnType<typeof getMetObservations>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetMetObservationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMetObservations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetObservations>>,
          TError,
          Awaited<ReturnType<typeof getMetObservations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMetObservations<
  TData = Awaited<ReturnType<typeof getMetObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetMetObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMetObservations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetObservations>>,
          TError,
          Awaited<ReturnType<typeof getMetObservations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMetObservations<
  TData = Awaited<ReturnType<typeof getMetObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetMetObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMetObservations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get meteorological observations
 */

export function useGetMetObservations<
  TData = Awaited<ReturnType<typeof getMetObservations>>,
  TError = ErrorType<unknown>
>(
  params?: GetMetObservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMetObservations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMetObservationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Access lightning strike observations with location and intensity
 * @summary Get lightning strike data
 */
export const getLightningData = (
  params?: GetLightningDataParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<LightningDataResponse>(
    {
      url: `/lightningdata/collections/observation/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetLightningDataQueryKey = (
  params?: GetLightningDataParams
) => {
  return [
    `/lightningdata/collections/observation/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetLightningDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLightningData>>,
  TError = ErrorType<unknown>
>(
  params?: GetLightningDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLightningData>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLightningDataQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLightningData>>
  > = ({ signal }) => getLightningData(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLightningData>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLightningDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLightningData>>
>;
export type GetLightningDataQueryError = ErrorType<unknown>;

export function useGetLightningData<
  TData = Awaited<ReturnType<typeof getLightningData>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetLightningDataParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLightningData>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLightningData>>,
          TError,
          Awaited<ReturnType<typeof getLightningData>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLightningData<
  TData = Awaited<ReturnType<typeof getLightningData>>,
  TError = ErrorType<unknown>
>(
  params?: GetLightningDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLightningData>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLightningData>>,
          TError,
          Awaited<ReturnType<typeof getLightningData>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLightningData<
  TData = Awaited<ReturnType<typeof getLightningData>>,
  TError = ErrorType<unknown>
>(
  params?: GetLightningDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLightningData>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get lightning strike data
 */

export function useGetLightningData<
  TData = Awaited<ReturnType<typeof getLightningData>>,
  TError = ErrorType<unknown>
>(
  params?: GetLightningDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLightningData>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLightningDataQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Access historical climate data
 * @summary Get climate data
 */
export const getClimateData = (
  params?: GetClimateDataParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<ClimateDataResponse>(
    {
      url: `/climateData/collections/observation/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetClimateDataQueryKey = (params?: GetClimateDataParams) => {
  return [
    `/climateData/collections/observation/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetClimateDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getClimateData>>,
  TError = ErrorType<unknown>
>(
  params?: GetClimateDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClimateData>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetClimateDataQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getClimateData>>> = ({
    signal
  }) => getClimateData(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClimateData>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetClimateDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClimateData>>
>;
export type GetClimateDataQueryError = ErrorType<unknown>;

export function useGetClimateData<
  TData = Awaited<ReturnType<typeof getClimateData>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetClimateDataParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClimateData>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClimateData>>,
          TError,
          Awaited<ReturnType<typeof getClimateData>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetClimateData<
  TData = Awaited<ReturnType<typeof getClimateData>>,
  TError = ErrorType<unknown>
>(
  params?: GetClimateDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClimateData>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClimateData>>,
          TError,
          Awaited<ReturnType<typeof getClimateData>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetClimateData<
  TData = Awaited<ReturnType<typeof getClimateData>>,
  TError = ErrorType<unknown>
>(
  params?: GetClimateDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClimateData>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get climate data
 */

export function useGetClimateData<
  TData = Awaited<ReturnType<typeof getClimateData>>,
  TError = ErrorType<unknown>
>(
  params?: GetClimateDataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClimateData>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetClimateDataQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Access weather forecast data for specific coordinates
 * @summary Get forecast data by position
 */
export const getForecastByPosition = (
  collection: "dkss_nsbs" | "dkss_idw",
  params: GetForecastByPositionParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<ForecastResponse>(
    {
      url: `/forecastedr/collections/${collection}/position`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetForecastByPositionQueryKey = (
  collection: "dkss_nsbs" | "dkss_idw",
  params: GetForecastByPositionParams
) => {
  return [
    `/forecastedr/collections/${collection}/position`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetForecastByPositionQueryOptions = <
  TData = Awaited<ReturnType<typeof getForecastByPosition>>,
  TError = ErrorType<unknown>
>(
  collection: "dkss_nsbs" | "dkss_idw",
  params: GetForecastByPositionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getForecastByPosition>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetForecastByPositionQueryKey(collection, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getForecastByPosition>>
  > = ({ signal }) =>
    getForecastByPosition(collection, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!collection,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getForecastByPosition>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetForecastByPositionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getForecastByPosition>>
>;
export type GetForecastByPositionQueryError = ErrorType<unknown>;

export function useGetForecastByPosition<
  TData = Awaited<ReturnType<typeof getForecastByPosition>>,
  TError = ErrorType<unknown>
>(
  collection: "dkss_nsbs" | "dkss_idw",
  params: GetForecastByPositionParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getForecastByPosition>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getForecastByPosition>>,
          TError,
          Awaited<ReturnType<typeof getForecastByPosition>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetForecastByPosition<
  TData = Awaited<ReturnType<typeof getForecastByPosition>>,
  TError = ErrorType<unknown>
>(
  collection: "dkss_nsbs" | "dkss_idw",
  params: GetForecastByPositionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getForecastByPosition>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getForecastByPosition>>,
          TError,
          Awaited<ReturnType<typeof getForecastByPosition>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetForecastByPosition<
  TData = Awaited<ReturnType<typeof getForecastByPosition>>,
  TError = ErrorType<unknown>
>(
  collection: "dkss_nsbs" | "dkss_idw",
  params: GetForecastByPositionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getForecastByPosition>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get forecast data by position
 */

export function useGetForecastByPosition<
  TData = Awaited<ReturnType<typeof getForecastByPosition>>,
  TError = ErrorType<unknown>
>(
  collection: "dkss_nsbs" | "dkss_idw",
  params: GetForecastByPositionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getForecastByPosition>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetForecastByPositionQueryOptions(
    collection,
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
