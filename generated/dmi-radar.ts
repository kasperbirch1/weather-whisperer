/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * DMI Open Data API - Radar data
 * <h2>Free access to the Danish Meteorological Institutes data.  <img style="float: right; max-width: 6%;" src='https://www.dmi.dk/fileadmin/templates/img/logo.png'></img></h2>                    <p>The services provided by this API require authentication and an authentication key is mandatory.<br/>In order to retrieve data it is necessary to register as user. Read more here: <a style="text-decoration: none;" href="https://opendatadocs.dmi.govcloud.dk/en/Authentication">Authentication</a></p>                    <p><a style="text-decoration: none;" href="https://opendatadocs.dmi.govcloud.dk/en/APIs/Radar_Data_API">Information about the Radar Data service</a></p>                    <p>This service follows the standard for STAC API - Features as described in <a href="https://api.stacspec.org/v1.0.0-beta.4/core/">STAC API - Core</a></p>
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query";

import type {
  Collection,
  Collections,
  Conformance,
  Feature,
  FeatureCollection,
  GetCompositeFeaturesParams,
  GetPseudoCappiFeaturesParams,
  GetVolumeFeaturesParams,
  LandingPage
} from "./dmi-radar-schemas";

import { dmiMutator } from "../mutator/dmi-mutator";
import type { ErrorType } from "../mutator/dmi-mutator";
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Download the given radar file
 */
export const getFile = (
  fileName: string,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Blob>(
    {
      url: `/v1/radardata/download/${fileName}`,
      method: "GET",
      responseType: "blob",
      signal
    },
    options
  );
};

export const getGetFileQueryKey = (fileName: string) => {
  return [`/v1/radardata/download/${fileName}`] as const;
};

export const getGetFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFileQueryKey(fileName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFile>>> = ({
    signal
  }) => getFile(fileName, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!fileName,
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFile>>
>;
export type GetFileQueryError = ErrorType<unknown>;

export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFile>>,
          TError,
          Awaited<ReturnType<typeof getFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFile>>,
          TError,
          Awaited<ReturnType<typeof getFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Download the given radar file
 */

export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFileQueryOptions(fileName, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get the list of conformance classes that this service implements
 */
export const getTheConformance = (
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Conformance>(
    { url: `/v1/radardata/conformance`, method: "GET", signal },
    options
  );
};

export const getGetTheConformanceQueryKey = () => {
  return [`/v1/radardata/conformance`] as const;
};

export const getGetTheConformanceQueryOptions = <
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getTheConformance>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof dmiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTheConformanceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTheConformance>>
  > = ({ signal }) => getTheConformance(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTheConformance>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTheConformanceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTheConformance>>
>;
export type GetTheConformanceQueryError = ErrorType<unknown>;

export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheConformance>>,
          TError,
          Awaited<ReturnType<typeof getTheConformance>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheConformance>>,
          TError,
          Awaited<ReturnType<typeof getTheConformance>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get the list of conformance classes that this service implements
 */

export function useGetTheConformance<
  TData = Awaited<ReturnType<typeof getTheConformance>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTheConformance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTheConformanceQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCollections = (
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Collections>(
    { url: `/v1/radardata/collections`, method: "GET", signal },
    options
  );
};

export const getGetCollectionsQueryKey = () => {
  return [`/v1/radardata/collections`] as const;
};

export const getGetCollectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
  >;
  request?: SecondParameter<typeof dmiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollections>>> = ({
    signal
  }) => getCollections(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCollections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollections>>
>;
export type GetCollectionsQueryError = ErrorType<unknown>;

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCollectionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about volume radar files feature collection
 */
export const getVolumeCollection = (
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Collection>(
    { url: `/v1/radardata/collections/volume`, method: "GET", signal },
    options
  );
};

export const getGetVolumeCollectionQueryKey = () => {
  return [`/v1/radardata/collections/volume`] as const;
};

export const getGetVolumeCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getVolumeCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getVolumeCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof dmiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVolumeCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVolumeCollection>>
  > = ({ signal }) => getVolumeCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVolumeCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVolumeCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVolumeCollection>>
>;
export type GetVolumeCollectionQueryError = ErrorType<unknown>;

export function useGetVolumeCollection<
  TData = Awaited<ReturnType<typeof getVolumeCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumeCollection>>,
          TError,
          Awaited<ReturnType<typeof getVolumeCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVolumeCollection<
  TData = Awaited<ReturnType<typeof getVolumeCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumeCollection>>,
          TError,
          Awaited<ReturnType<typeof getVolumeCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVolumeCollection<
  TData = Awaited<ReturnType<typeof getVolumeCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about volume radar files feature collection
 */

export function useGetVolumeCollection<
  TData = Awaited<ReturnType<typeof getVolumeCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetVolumeCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get radar data volume features
 */
export const getVolumeFeatures = (
  params?: GetVolumeFeaturesParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<FeatureCollection>(
    {
      url: `/v1/radardata/collections/volume/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetVolumeFeaturesQueryKey = (
  params?: GetVolumeFeaturesParams
) => {
  return [
    `/v1/radardata/collections/volume/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetVolumeFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getVolumeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetVolumeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetVolumeFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVolumeFeatures>>
  > = ({ signal }) => getVolumeFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVolumeFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVolumeFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVolumeFeatures>>
>;
export type GetVolumeFeaturesQueryError = ErrorType<unknown>;

export function useGetVolumeFeatures<
  TData = Awaited<ReturnType<typeof getVolumeFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetVolumeFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumeFeatures>>,
          TError,
          Awaited<ReturnType<typeof getVolumeFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVolumeFeatures<
  TData = Awaited<ReturnType<typeof getVolumeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetVolumeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumeFeatures>>,
          TError,
          Awaited<ReturnType<typeof getVolumeFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVolumeFeatures<
  TData = Awaited<ReturnType<typeof getVolumeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetVolumeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get radar data volume features
 */

export function useGetVolumeFeatures<
  TData = Awaited<ReturnType<typeof getVolumeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetVolumeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetVolumeFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single radar data volume feature
 */
export const getVolumeFeatureById = (
  id: string,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Feature>(
    {
      url: `/v1/radardata/collections/volume/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetVolumeFeatureByIdQueryKey = (id: string) => {
  return [`/v1/radardata/collections/volume/items/${id}`] as const;
};

export const getGetVolumeFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getVolumeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetVolumeFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVolumeFeatureById>>
  > = ({ signal }) => getVolumeFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getVolumeFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVolumeFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVolumeFeatureById>>
>;
export type GetVolumeFeatureByIdQueryError = ErrorType<unknown>;

export function useGetVolumeFeatureById<
  TData = Awaited<ReturnType<typeof getVolumeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumeFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getVolumeFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVolumeFeatureById<
  TData = Awaited<ReturnType<typeof getVolumeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumeFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getVolumeFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVolumeFeatureById<
  TData = Awaited<ReturnType<typeof getVolumeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single radar data volume feature
 */

export function useGetVolumeFeatureById<
  TData = Awaited<ReturnType<typeof getVolumeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVolumeFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetVolumeFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about pseudo CAPPI radar files feature collection
 */
export const getPseudoCappiCollection = (
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Collection>(
    { url: `/v1/radardata/collections/pseudoCappi`, method: "GET", signal },
    options
  );
};

export const getGetPseudoCappiCollectionQueryKey = () => {
  return [`/v1/radardata/collections/pseudoCappi`] as const;
};

export const getGetPseudoCappiCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getPseudoCappiCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPseudoCappiCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof dmiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPseudoCappiCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPseudoCappiCollection>>
  > = ({ signal }) => getPseudoCappiCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPseudoCappiCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPseudoCappiCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPseudoCappiCollection>>
>;
export type GetPseudoCappiCollectionQueryError = ErrorType<unknown>;

export function useGetPseudoCappiCollection<
  TData = Awaited<ReturnType<typeof getPseudoCappiCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPseudoCappiCollection>>,
          TError,
          Awaited<ReturnType<typeof getPseudoCappiCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPseudoCappiCollection<
  TData = Awaited<ReturnType<typeof getPseudoCappiCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPseudoCappiCollection>>,
          TError,
          Awaited<ReturnType<typeof getPseudoCappiCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPseudoCappiCollection<
  TData = Awaited<ReturnType<typeof getPseudoCappiCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about pseudo CAPPI radar files feature collection
 */

export function useGetPseudoCappiCollection<
  TData = Awaited<ReturnType<typeof getPseudoCappiCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPseudoCappiCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get radar data pseudo CAPPI features
 */
export const getPseudoCappiFeatures = (
  params?: GetPseudoCappiFeaturesParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<FeatureCollection>(
    {
      url: `/v1/radardata/collections/pseudoCappi/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetPseudoCappiFeaturesQueryKey = (
  params?: GetPseudoCappiFeaturesParams
) => {
  return [
    `/v1/radardata/collections/pseudoCappi/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetPseudoCappiFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetPseudoCappiFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPseudoCappiFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPseudoCappiFeatures>>
  > = ({ signal }) => getPseudoCappiFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPseudoCappiFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPseudoCappiFeatures>>
>;
export type GetPseudoCappiFeaturesQueryError = ErrorType<unknown>;

export function useGetPseudoCappiFeatures<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetPseudoCappiFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
          TError,
          Awaited<ReturnType<typeof getPseudoCappiFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPseudoCappiFeatures<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetPseudoCappiFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
          TError,
          Awaited<ReturnType<typeof getPseudoCappiFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPseudoCappiFeatures<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetPseudoCappiFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get radar data pseudo CAPPI features
 */

export function useGetPseudoCappiFeatures<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetPseudoCappiFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPseudoCappiFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single radar data pseudo CAPPI feature
 */
export const getPseudoCappiFeatureById = (
  id: string,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Feature>(
    {
      url: `/v1/radardata/collections/pseudoCappi/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetPseudoCappiFeatureByIdQueryKey = (id: string) => {
  return [`/v1/radardata/collections/pseudoCappi/items/${id}`] as const;
};

export const getGetPseudoCappiFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPseudoCappiFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPseudoCappiFeatureById>>
  > = ({ signal }) => getPseudoCappiFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPseudoCappiFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPseudoCappiFeatureById>>
>;
export type GetPseudoCappiFeatureByIdQueryError = ErrorType<unknown>;

export function useGetPseudoCappiFeatureById<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getPseudoCappiFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPseudoCappiFeatureById<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getPseudoCappiFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPseudoCappiFeatureById<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single radar data pseudo CAPPI feature
 */

export function useGetPseudoCappiFeatureById<
  TData = Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPseudoCappiFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPseudoCappiFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get information about composite radar files feature collection
 */
export const getCompositeCollection = (
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Collection>(
    { url: `/v1/radardata/collections/composite`, method: "GET", signal },
    options
  );
};

export const getGetCompositeCollectionQueryKey = () => {
  return [`/v1/radardata/collections/composite`] as const;
};

export const getGetCompositeCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompositeCollection>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCompositeCollection>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof dmiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCompositeCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCompositeCollection>>
  > = ({ signal }) => getCompositeCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCompositeCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompositeCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompositeCollection>>
>;
export type GetCompositeCollectionQueryError = ErrorType<unknown>;

export function useGetCompositeCollection<
  TData = Awaited<ReturnType<typeof getCompositeCollection>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompositeCollection>>,
          TError,
          Awaited<ReturnType<typeof getCompositeCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompositeCollection<
  TData = Awaited<ReturnType<typeof getCompositeCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompositeCollection>>,
          TError,
          Awaited<ReturnType<typeof getCompositeCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompositeCollection<
  TData = Awaited<ReturnType<typeof getCompositeCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get information about composite radar files feature collection
 */

export function useGetCompositeCollection<
  TData = Awaited<ReturnType<typeof getCompositeCollection>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCompositeCollectionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get composite radar data features
 */
export const getCompositeFeatures = (
  params?: GetCompositeFeaturesParams,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<FeatureCollection>(
    {
      url: `/v1/radardata/collections/composite/items`,
      method: "GET",
      params,
      signal
    },
    options
  );
};

export const getGetCompositeFeaturesQueryKey = (
  params?: GetCompositeFeaturesParams
) => {
  return [
    `/v1/radardata/collections/composite/items`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetCompositeFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompositeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetCompositeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCompositeFeaturesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCompositeFeatures>>
  > = ({ signal }) => getCompositeFeatures(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCompositeFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompositeFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompositeFeatures>>
>;
export type GetCompositeFeaturesQueryError = ErrorType<unknown>;

export function useGetCompositeFeatures<
  TData = Awaited<ReturnType<typeof getCompositeFeatures>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetCompositeFeaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompositeFeatures>>,
          TError,
          Awaited<ReturnType<typeof getCompositeFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompositeFeatures<
  TData = Awaited<ReturnType<typeof getCompositeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetCompositeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompositeFeatures>>,
          TError,
          Awaited<ReturnType<typeof getCompositeFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompositeFeatures<
  TData = Awaited<ReturnType<typeof getCompositeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetCompositeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get composite radar data features
 */

export function useGetCompositeFeatures<
  TData = Awaited<ReturnType<typeof getCompositeFeatures>>,
  TError = ErrorType<unknown>
>(
  params?: GetCompositeFeaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatures>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCompositeFeaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a single radar data composite feature
 */
export const getCompositeFeatureById = (
  id: string,
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<Feature>(
    {
      url: `/v1/radardata/collections/composite/items/${id}`,
      method: "GET",
      signal
    },
    options
  );
};

export const getGetCompositeFeatureByIdQueryKey = (id: string) => {
  return [`/v1/radardata/collections/composite/items/${id}`] as const;
};

export const getGetCompositeFeatureByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompositeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCompositeFeatureByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCompositeFeatureById>>
  > = ({ signal }) => getCompositeFeatureById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCompositeFeatureById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompositeFeatureByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompositeFeatureById>>
>;
export type GetCompositeFeatureByIdQueryError = ErrorType<unknown>;

export function useGetCompositeFeatureById<
  TData = Awaited<ReturnType<typeof getCompositeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompositeFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getCompositeFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompositeFeatureById<
  TData = Awaited<ReturnType<typeof getCompositeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatureById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompositeFeatureById>>,
          TError,
          Awaited<ReturnType<typeof getCompositeFeatureById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompositeFeatureById<
  TData = Awaited<ReturnType<typeof getCompositeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single radar data composite feature
 */

export function useGetCompositeFeatureById<
  TData = Awaited<ReturnType<typeof getCompositeFeatureById>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCompositeFeatureById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCompositeFeatureByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Landing page for service
 */
export const getLandingPage = (
  options?: SecondParameter<typeof dmiMutator>,
  signal?: AbortSignal
) => {
  return dmiMutator<LandingPage>(
    { url: `/v1/radardata/`, method: "GET", signal },
    options
  );
};

export const getGetLandingPageQueryKey = () => {
  return [`/v1/radardata/`] as const;
};

export const getGetLandingPageQueryOptions = <
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
  >;
  request?: SecondParameter<typeof dmiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLandingPageQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLandingPage>>> = ({
    signal
  }) => getLandingPage(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLandingPage>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLandingPageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLandingPage>>
>;
export type GetLandingPageQueryError = ErrorType<unknown>;

export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLandingPage>>,
          TError,
          Awaited<ReturnType<typeof getLandingPage>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLandingPage>>,
          TError,
          Awaited<ReturnType<typeof getLandingPage>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Landing page for service
 */

export function useGetLandingPage<
  TData = Awaited<ReturnType<typeof getLandingPage>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLandingPage>>, TError, TData>
    >;
    request?: SecondParameter<typeof dmiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLandingPageQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
